plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.hibernate.orm' version '6.1.7.Final'
    id 'org.graalvm.buildtools.native' version '0.9.20'
    id 'com.diffplug.spotless' version '6.18.0'
    id 'com.github.spotbugs' version '5.0.14'
    id 'checkstyle'
    id 'org.owasp.dependencycheck' version "8.2.1"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

hibernate {
    enhancement {
        lazyInitialization true
        dirtyTracking true
        associationManagement true
    }
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        palantirJavaFormat()
        encoding("UTF-8")
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }

    format 'misc', {
        target '**/*.gradle', '**/*.xml', '**/.gitignore', '**/.properties', '**/*.yml', '**/*.sql'
        targetExclude ".gradle/**", ".idea/**", "*/build/**"
        encoding("UTF-8")
        trimTrailingWhitespace()
        endWithNewline()
    }
}

checkstyle {
    toolVersion = '9.3'
    ignoreFailures = false
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configDirectory = rootProject.file("config/checkstyle")
    sourceSets = [sourceSets.main]
}

spotbugs {
    toolVersion = '4.7.3'
    excludeFilter = rootProject.file('config/spotbugs/findbugs-exclude.xml')
    ignoreFailures = false
    spotbugsMain.enabled = true
    spotbugsTest.enabled = false
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
